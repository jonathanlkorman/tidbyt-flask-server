load("encoding/json.star", "json")
load("http.star", "http")
load("render.star", "render")
load("schema.star", "schema")
load("time.star", "time")
load("encoding/base64.star", "base64")

CACHE_TTL_SECONDS = 300

URL = "https://api.ticktick.com/api/v2/habitCheckins/query"

WHITE = "#FFFFFF"
BLACK = "#000000"
BLUE = "#78BEFF"

DEFAULT_TIMEZONE = "America/New_York"
DEFAULT_NAME = "Habit"

CIRCLE = base64.decode("""
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
""")

CHECK = base64.decode("""
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
PioItMvlYAAAAASUVORK5CYII=
""")

STREAK_ICON_GOLD = base64.decode("""
iVBORw0KGgoAAAANSUhEUgAAAAYAAAAICAYAAADaxo44AAAACXBIWXMAAAsTAAALEwEAmpwYAAAGeWlUWHRYTUw6Y29tLmFkb2JlLnh
tcAAAAAAAPD94cGFja2V0IGJlZ2luPSLvu78iIGlkPSJXNU0wTXBDZWhpSHpyZVN6TlRjemtjOWQiPz4gPHg6eG1wbWV0YSB4bWxucz
p4PSJhZG9iZTpuczptZXRhLyIgeDp4bXB0az0iQWRvYmUgWE1QIENvcmUgNy4xLWMwMDAgNzkuZWRhMmIzZmFjLCAyMDIxLzExLzE3L
TE3OjIzOjE5ICAgICAgICAiPiA8cmRmOlJERiB4bWxuczpyZGY9Imh0dHA6Ly93d3cudzMub3JnLzE5OTkvMDIvMjItcmRmLXN5bnRh
eC1ucyMiPiA8cmRmOkRlc2NyaXB0aW9uIHJkZjphYm91dD0iIiB4bWxuczp4bXA9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC8
iIHhtbG5zOmRjPSJodHRwOi8vcHVybC5vcmcvZGMvZWxlbWVudHMvMS4xLyIgeG1sbnM6cGhvdG9zaG9wPSJodHRwOi8vbnMuYWRvYm
UuY29tL3Bob3Rvc2hvcC8xLjAvIiB4bWxuczp4bXBNTT0iaHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wL21tLyIgeG1sbnM6c3RFd
nQ9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC9zVHlwZS9SZXNvdXJjZUV2ZW50IyIgeG1wOkNyZWF0b3JUb29sPSJBZG9iZSBQ
aG90b3Nob3AgMjMuMSAoTWFjaW50b3NoKSIgeG1wOkNyZWF0ZURhdGU9IjIwMjItMDItMjBUMTc6NDU6MjRaIiB4bXA6TW9kaWZ5RGF
0ZT0iMjAyMi0wMy0xMlQxMjozOFoiIHhtcDpNZXRhZGF0YURhdGU9IjIwMjItMDMtMTJUMTI6MzhaIiBkYzpmb3JtYXQ9ImltYWdlL3
BuZyIgcGhvdG9zaG9wOkNvbG9yTW9kZT0iMyIgeG1wTU06SW5zdGFuY2VJRD0ieG1wLmlpZDpkZjU1OTY3YS04NTUwLTQ4OTAtYjgyY
i1kMzMxZmY1NjkzMWUiIHhtcE1NOkRvY3VtZW50SUQ9ImFkb2JlOmRvY2lkOnBob3Rvc2hvcDpmZTgzYjE5Yy1hMDdhLWIzNDctODhi
MS0wZWFkYWI4YjhiMjUiIHhtcE1NOk9yaWdpbmFsRG9jdW1lbnRJRD0ieG1wLmRpZDowZGZjMTU2Yy1mMTlkLTQ5NjItOGFjZS04ZTE
xYzc3MTRlMmEiPiA8eG1wTU06SGlzdG9yeT4gPHJkZjpTZXE+IDxyZGY6bGkgc3RFdnQ6YWN0aW9uPSJjcmVhdGVkIiBzdEV2dDppbn
N0YW5jZUlEPSJ4bXAuaWlkOjBkZmMxNTZjLWYxOWQtNDk2Mi04YWNlLThlMTFjNzcxNGUyYSIgc3RFdnQ6d2hlbj0iMjAyMi0wMi0yM
FQxNzo0NToyNFoiIHN0RXZ0OnNvZnR3YXJlQWdlbnQ9IkFkb2JlIFBob3Rvc2hvcCAyMy4xIChNYWNpbnRvc2gpIi8+IDxyZGY6bGkg
c3RFdnQ6YWN0aW9uPSJzYXZlZCIgc3RFdnQ6aW5zdGFuY2VJRD0ieG1wLmlpZDphYzYyYzg5OS1hY2RjLTRmMmMtOGJkNy02OWFmODB
hZTJkNzUiIHN0RXZ0OndoZW49IjIwMjItMDMtMTJUMTI6MTc6MTFaIiBzdEV2dDpzb2Z0d2FyZUFnZW50PSJBZG9iZSBQaG90b3Nob3
AgMjMuMSAoTWFjaW50b3NoKSIgc3RFdnQ6Y2hhbmdlZD0iLyIvPiA8cmRmOmxpIHN0RXZ0OmFjdGlvbj0ic2F2ZWQiIHN0RXZ0Omluc
3RhbmNlSUQ9InhtcC5paWQ6ZGY1NTk2N2EtODU1MC00ODkwLWI4MmItZDMzMWZmNTY5MzFlIiBzdEV2dDp3aGVuPSIyMDIyLTAzLTEy
VDEyOjM4WiIgc3RFdnQ6c29mdHdhcmVBZ2VudD0iQWRvYmUgUGhvdG9zaG9wIDIzLjEgKE1hY2ludG9zaCkiIHN0RXZ0OmNoYW5nZWQ
9Ii8iLz4gPC9yZGY6U2VxPiA8L3htcE1NOkhpc3Rvcnk+IDwvcmRmOkRlc2NyaXB0aW9uPiA8L3JkZjpSREY+IDwveDp4bXBtZXRhPi
A8P3hwYWNrZXQgZW5kPSJyIj8+bq5RSQAAAF1JREFUCJltjLEVRAAUBGe9d+jENacaketGDwJKkRjBR3Qbzu5OVP7mKVTOGQECNO9g6
cWg4lOoEOH7gaVTJSr+mlIMLQayHfVIyZCCr4pVMGQvmJVSJcERvd+ZyAVgJzcslQ/SGQAAAABJRU5ErkJggg==
""")

XP_ICON_GOLD = base64.decode("""
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
HiMyzCCQ==
""")

def main(config):
    habitId = config.get("habitId")
    cookie = config.get("cookie")
    habit_name = config.get("habitName", DEFAULT_NAME)
    timezone = config.get("timezone", DEFAULT_TIMEZONE)
    now = time.now().in_location(timezone)
    
    last_week = now - (time.parse_duration("24h") * 30)
    default_stamp = time.time(year=last_week.year, month=last_week.month, day=last_week.day, location=timezone)
    afterStamp = config.get("afterStamp", default_stamp.format("20060102"))

    if not habitId:
        return render.Root(child = render.Text("No ID"))
    if not cookie:
        return render.Root(child = render.Text("No cookie"))
        
    habit_data = get_habit_data(habitId, cookie, afterStamp)
    
    if not habit_data:
        return render.Root(child = render.Text("No data available"))
    
    habit_stats = get_habit_stats(habit_data, now)
    rolling_week_checkins = get_rolling_week_checkins(habit_data, now)

    return render.Root(
        child = render.Column(
            expanded = True,
            main_align = "space_evenly",
            cross_align = "start", 
            children = [
                render.Text(habit_name),
                render.Box(width = 64, height = 1, color = "#3e60cd"),
                render.Box(width = 64, height = 1, color = BLACK),
                render.Row(
                    main_align = "space_evenly",
                    cross_align = "center", 
                    expanded = True,
                    children = [
                        render.Row(
                            main_align = "space_evenly",
                            cross_align = "end", 
                            expanded = False,
                            children = [
                                render.Image(XP_ICON_GOLD, width = 6, height = 7),
                                render.Box(width = 1, height = 7, color = BLACK),
                                render.Text(str(habit_stats["total_checkins"]), font = "tom-thumb", color = WHITE)
                            ]
                        ),
                        render.Row(
                            main_align = "space_evenly",
                            cross_align = "end", 
                            expanded = False,
                            children = [
                                render.Image(STREAK_ICON_GOLD, width = 6, height = 7),
                                render.Box(width = 1, height = 7, color = BLACK),
                                render.Text(str(habit_stats["streak"]), font = "tom-thumb", color = WHITE)
                            ]
                        )
                    ]
                ),
                render.Box(width = 64, height = 3, color = BLACK),
                render_rolling_week_view(rolling_week_checkins)
            ],
        ),
    )

def get_rolling_week_checkins(habit_data, now):
    daily_checkins = {0: False, 1: False, 2: False, 3: False, 4: False, 5: False, 6: False}
    
    h = now.day
    m = now.month
    Y = now.year
    if m <= 2:
        m += 12
        Y -= 1
    K = Y % 100
    J = Y // 100
    today_dow = (h + ((13 * (m + 1)) // 5) + K + (K // 4) + (J // 4) - (2 * J)) % 7
    
    def get_days_in_month(month, year):
        days = [0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]
        if month == 2 and (year % 4 == 0 and (year % 100 != 0 or year % 400 == 0)):
            return 29
        return days[month]
    
    def adjust_date_one_month(day, month, year):
        if day <= 0:
            month -= 1
            if month <= 0:
                month = 12
                year -= 1
            day += get_days_in_month(month, year)
        return day, month, year
    
    for i in range(7):
        days_ago = 6 - i
        
        curr_day = now.day - days_ago
        curr_month = now.month
        curr_year = now.year
        
        curr_day, curr_month, curr_year = adjust_date_one_month(curr_day, curr_month, curr_year)
        
        curr_day, curr_month, curr_year = adjust_date_one_month(curr_day, curr_month, curr_year)
        
        curr_day, curr_month, curr_year = adjust_date_one_month(curr_day, curr_month, curr_year)
        
        check_stamp = curr_year * 10000 + curr_month * 100 + curr_day
        
        for checkin in habit_data:
            if checkin["checkinStamp"] == check_stamp:
                daily_checkins[i] = True
                break
                
    return daily_checkins
    
def render_rolling_week_view(rolling_week_checkins):
    now = time.now().in_location(DEFAULT_TIMEZONE)
    h = now.day
    m = now.month
    Y = now.year
    if m <= 2:
        m += 12
        Y -= 1
    K = Y % 100
    J = Y // 100
    today_dow = (h + ((13 * (m + 1)) // 5) + K + (K // 4) + (J // 4) - (2 * J)) % 7
    
    day_labels = ["s", "m", "t", "w", "t", "f", "s"]
    week_columns = []
    
    for i in range(7):
        days_ago = 6 - i
        display_dow = (today_dow - days_ago) % 7 
        
        day_children = []

        day_children.append(render.Image(CHECK if rolling_week_checkins.get(i, False) else CIRCLE, width = 6, height = 6))
        day_children.append(render.Row(
            main_align = "space_evenly",
            cross_align = "end",  
            expanded = False,
            children = [
                render.Box(
                    width = 1,
                    height = 7,
                ),
                render.Text(day_labels[display_dow], font = "tom-thumb", color = WHITE),
                render.Box(
                    width = 1,
                    height = 7,
                ),
            ],
        ))
        
        week_columns.append(
            render.Column(
                main_align = "center",
                cross_align = "center",
                expanded = True,
                children = day_children
            )
        )
    
    return render.Row(
        main_align = "space_evenly",
        cross_align = "end", 
        expanded = True,
        children = week_columns
    )

def get_habit_data(habitId, cookie, afterStamp):
    headers = {
        "Cookie": cookie
    }
    
    json_body = {
        "afterStamp": afterStamp,
        "habitIds": [
            habitId
        ]
    }
    response = http.post(
        url=URL,
        headers=headers,
        json_body=json_body
    )
    
    if response.status_code != 200:
        return {
            "error": "Request failed with status code",
            "response": json.decode(response.body())
        }
    
    data = json.decode(response.body())

    checkins = data["checkins"][habitId]
    
    return checkins


def get_habit_stats(habit_data, now):
    habit_stats = {
        "total_checkins": len(habit_data),
        "streak": calculate_streak(habit_data, now),
    }
    
    return habit_stats

def calculate_streak(habit_data, now):
    if not habit_data:
        return 0
    
    sorted_checkins = sorted(habit_data, key=lambda x: x["checkinStamp"], reverse=True)
    
    today_int = now.year * 10000 + now.month * 100 + now.day
    yesterday_int = get_previous_day(today_int)
    
    checkin_dates = {}
    for checkin in sorted_checkins:
        checkin_dates[checkin["checkinStamp"]] = True
    
    most_recent_date = sorted_checkins[0]["checkinStamp"]
    
    streak = 1
    
    if most_recent_date == today_int:
        check_date = yesterday_int
    elif most_recent_date == yesterday_int:
        check_date = get_previous_day(yesterday_int)
    else:
        return 1
    
    current_date = most_recent_date
    
    for _ in range(len(sorted_checkins) - 1):
        previous_date = get_previous_day(current_date)
        
        if previous_date in checkin_dates:
            streak += 1
            current_date = previous_date
        else:
            break
    
    return streak

def get_previous_day(date_int):
    year = date_int // 10000
    month = (date_int // 100) % 100
    day = date_int % 100
    
    day -= 1
    
    if day == 0:
        month -= 1
        
        if month == 0:
            month = 12
            year -= 1
        
        if month == 2:
            if (year % 4 == 0 and year % 100 != 0) or (year % 400 == 0):
                day = 29
            else:
                day = 28
        elif month in [4, 6, 9, 11]:
            day = 30
        else:
            day = 31
    
    return year * 10000 + month * 100 + day